.. _sec:ttree:

Using *lttree.py* or *ttree.py* directly
========================================

(bypassing moltemplate.sh)
--------------------------

“moltemplate.sh” is only a simple script which invokes “lttree.py”, and
then combines the various output files generated by lttree.py into a
single LAMMPS input script and a data file, along with coordinate data.
“lttree.py” then invokes “ttree.py”. “ttree.py” lacks the ability to
read or generate coordinates, but is otherwise nearly identical to
“lttree.py” and “moltemplate.sh”.

If in the future moltemplate.sh no longer works with some new, recently
added LAMMPS feature, you can bypass moltemplate.sh and run lttree.py or
ttree.py directly. Everything moltemplate.sh does can essentially be
done by hand with a unix shell and a text editor. This procedure is
outlined below.

First run ttree.py
------------------

The syntax for running “ttree.py” is identical to the syntax for running
moltemplate.sh. The moltemplate.sh syntax is explained above.

Unfortunately, ttree.py does not understand the -pdb, -xyz, or -raw
arguments for processing coordinate data. If you run “ttree.py”
directly, then you must extract the coordinate data from these files
yourself and insert it into your lammps input files manually. This is
explained below.

Example: Go to the examples/waterSPCE/ directory and run:

ttree.py system.lt

This will prepare LAMMPS input files for a system of 32 water molecules.
(In this example, we are using the “SPCE” water model.)

Running the command above will probably create the following files:
“Data Atoms” (The “Atoms” section of a LAMMPS data file, w/o
coordinates) “Data Bonds” (The “Bonds” section of a LAMMPS data file)
“Data Angles” (The “Angles” section of a LAMMPS data file) “Data Masses”
(The “Masses” section of a LAMMPS data file) “In Init” (The
“Initialization” section of a LAMMPS input script.) “In Settings” (The
“Settings” section of a LAMMPS input script, which typically contains
force-field parameters, group defs, and constraints) “Data Boundary”
(The “Periodic Boundary Conditions” section of a LAMMPS data file.)
“ttree_assignments.txt” (Variable assignments. See “customization”
section.)

This data can be easily combined into a single LAMMPS data file and a
single lammps input script later on, using a text editor, or the unix
“cat” and “paste” commands.

It may also create these files: “Data Angles By Type”, “Data Dihedrals
By Type”, “Data Impropers By Type”. These files tell moltemplate how to
automatically generate bonded-interactions by atom and bond type. They
must be converted to lists of angles, dihedrals, and impropers, using
the “nbody_by_type.py” utility (as explained in appendix
`11 <#sec:nbody_by_type>`__).

Then create a LAMMPS data file
------------------------------

Create a new file (“system.data” in this example), and paste the
following text into it:

Create the “header” section
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example:

::

   LAMMPS Description

        96  atoms
        64  bonds
        32  angles
        0  dihedrals

        2  atom types
        1  bond types
        1  angle types
        0  dihedral types

     0.000000   9.043    xlo xhi
     0.000000   15.663   ylo yhi
     0.000000   7.361    zlo zhi

If you use ttree.py, will have to count the number of atoms, bonds, and
atom types, bond types etc. yourself.

Note: the numbers in the “xlo xhi” “ylo yhi” “zlo zhi” lines determine
the simulation box size, and will vary from system to system. If ttree
created a file named “Data Boundary”, you can copy this information from
there. (Triclinic cells have a fourth line containing the “xy xz yz”
parameters.) (If you have a .PDB file, these boundary box numbers are in
the “CRYST1” line near the beginning of the file.)

Once you’ve created the “header” section of the data file, paste the
other sections to the end of your LAMMPS data file (with the appropriate
section headings and blank lines).

::

   echo "" >> system.data
   echo "Atoms" >> system.data
   echo "" >> system.data
   cat "Data Atoms" >> system.data
   echo "" >> system.data
   echo "Bonds" >> system.data
   echo "" >> system.data
   cat "Data Bonds" >> system.data
   echo "" >> system.data
   echo "Angles" >> system.data
   echo "" >> system.data
   cat "Data Angles" >> system.data
   echo "" >> system.data
   echo "Masses" >> system.data
   echo "" >> system.data
   cat "Data Masses" >> system.data
   echo "" >> system.data

Depending on your system, you may also have these files as well: “Data
Dihedrals” “Data Impropers” “Data Bond Coeffs” “Data Angle Coeffs” “Data
Dihedral Coeffs” “Data Improper Coeffs”. If so, then then append them to
the end of your data file as well. (There are numerous other optional
sections for “class2” force-fields. Exotic atom styles also require
their own sections such as “lines” “ellipsoids” and “triangles”. Consult
the LAMMPS documentation for details on these as well.)

Now create the LAMMPS input script
----------------------------------

::

   echo "include \"In Init\"" > system.in
   echo "read_data system.data" >> system.in
   echo "include \"In Settings\"" >> system.in

Lastly, you have to worry about supplying the atomic coordinates.
(Unlike moltemplate, ttree.py does not handle atom coordinates.)

The following commands are useful for extracting coordinates from PDB or
XYZ files and converting them to LAMMPS input script commands:

Extract coordinates
-------------------

To extract coordinates from a .PDB file (“file.pdb”), use:

::

   awk '/^ATOM  |^HETATM/{print substr($0,31,8) \
                             " "substr($0,39,8) \
                             " "substr($0,47,8)}' \
       < file.pdb \
       > tmp_atom_coords.dat

*(Note: There should be two spaces following the word “ATOM” above.)*

To extract coordinates from an XYZ file (“file.xyz”), use:

::

   awk 'function isnum(x){return(x==x+0)} \
        BEGIN{targetframe=1;framecount=0} \
        {if (isnum($0)) {framecount++} else \
         {if (framecount==targetframe) { \
          if (NF>0) { \
           if ((NF==3) && isnum($1)) { \
            print $1" "$2" "$3} \
           else if ((NF==4) && isnum($2)) { \
            print $2" "$3" "$4} }}}}' \
       < file.xyz \
       > tmp_atom_coords.dat

Convert the coordinate file to LAMMPS input script format
---------------------------------------------------------

::

   awk '{if (NF>=3) { \
         natom++; print "set atom "natom" x "$1" y "$2" z "$3" "}}' \
       < tmp_atom_coords.dat \
      >> system.in.coords

Finally import “system.in.coords” in your lammps input script using:

::

   echo "include \"system.in.coords\"" >> system.in
